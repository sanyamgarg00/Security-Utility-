import tkinter as tk
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Set up the session with the user agent
s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"

# Define the functions to be used in the GUI
def get_forms(url):
    soup = BeautifulSoup(s.get(url).content, "html.parser")
    return soup.find_all("form")

def form_details(form):
    detailsOfForm = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get")
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({
            "type": input_type, 
            "name" : input_name,
            "value" : input_value,
        })
        
    detailsOfForm['action'] = action
    detailsOfForm['method'] = method
    detailsOfForm['inputs'] = inputs
    return detailsOfForm

def vulnerable(response):
    errors = {"quoted string not properly terminated", 
              "unclosed quotation mark after the character string",
              "you have an error in your SQL syntax" 
             }
    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False

def sql_injection_scan():
    url = url_entry.get()
    forms = get_forms(url)
    result_text.delete('1.0', tk.END)
    result_text.insert(tk.END, f"[+] Detected {len(forms)} forms on {url}.\n")
    
    for form in forms:
        details = form_details(form)
        
        for i in "\"'":
            data = {}
            for input_tag in details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    data[input_tag['name']] = input_tag["value"] + i
                elif input_tag["type"] != "submit":
                    data[input_tag['name']] = f"test{i}"
    
            result_text.insert(tk.END, f"{url}\n")
            result_text.insert(tk.END, f"{form_details(form)}\n")

            if details["method"] == "post":
                res = s.post(url, data=data)
            elif details["method"] == "get":
                res = s.get(url, params=data)
            if vulnerable(res):
                result_text.insert(tk.END, "SQL Injection Vulnerability Detected In Website: " + url + "\n")
            else:
                result_text.insert(tk.END, "No SQL Injection Vulnerability Detected\n")
                break

# Set up the GUI
root = tk.Tk()
root.title("SQL Injection Vulnerability Scanner")
root.geometry("800x600")
root.configure(bg="black")

# Set fonts
title_font = ("Times New Roman", 24, "bold")
label_font = ("Times New Roman", 14)
button_font = ("Times New Roman", 16, "bold")
result_font = ("Times New Roman", 12)

# Create widgets
title_label = tk.Label(root, text="SQL Injection Vulnerability Scanner", font=title_font)
title_label.pack(pady=20)

url_label = tk.Label(root, text="Enter The Website URL:", font=label_font)
url_label.pack()

url_entry = tk.Entry(root, width=50, font=label_font)
url_entry.pack(pady=10)

scan_button = tk.Button(root, text="Scan", font=button_font, command=sql_injection_scan)
scan_button.pack(pady=20)

result_text = tk.Text(root, height=10, font=result_font)
result_text.pack(pady=10, padx=10)

# Start the main loop
root.mainloop()